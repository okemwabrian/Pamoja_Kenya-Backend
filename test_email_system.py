#!/usr/bin/env python
"""
Test script for email notification system
Run with: python test_email_system.py
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pamoja_kenya.settings')
django.setup()

from django.core.mail import send_mail
from django.conf import settings
from accounts.models import User
from applications.models import Application
from payments.models import Payment
from claims.models import Claim
from notifications.models import ContactMessage
from notifications.email_service import (
    send_welcome_email,
    send_application_confirmation_email,
    send_payment_confirmation_email,
    send_claim_status_email,
    send_contact_form_notification,
    send_password_reset_email,
    generate_password_reset_url
)

def test_email_configuration():
    """Test basic email configuration"""
    print("üîß Testing Email Configuration...")
    print(f"EMAIL_BACKEND: {settings.EMAIL_BACKEND}")
    print(f"EMAIL_HOST: {settings.EMAIL_HOST}")
    print(f"EMAIL_PORT: {settings.EMAIL_PORT}")
    print(f"DEFAULT_FROM_EMAIL: {settings.DEFAULT_FROM_EMAIL}")
    
    try:
        send_mail(
            'Test Email',
            'This is a test email from Pamoja Kenya backend.',
            settings.DEFAULT_FROM_EMAIL,
            ['test@example.com'],
            fail_silently=False,
        )
        print("‚úÖ Basic email configuration working!")
        return True
    except Exception as e:
        print(f"‚ùå Email configuration error: {e}")
        return False

def test_welcome_email():
    """Test welcome email"""
    print("\nüìß Testing Welcome Email...")
    try:
        user, created = User.objects.get_or_create(
            email='testuser@example.com',
            defaults={
                'username': 'testuser',
                'first_name': 'Test',
                'last_name': 'User'
            }
        )
        
        result = send_welcome_email(user)
        if result:
            print("‚úÖ Welcome email sent successfully!")
        else:
            print("‚ùå Welcome email failed!")
        return result
    except Exception as e:
        print(f"‚ùå Welcome email error: {e}")
        return False

def test_application_confirmation_email():
    """Test application confirmation email"""
    print("\nüìß Testing Application Confirmation Email...")
    try:
        user, created = User.objects.get_or_create(
            email='testuser@example.com',
            defaults={
                'username': 'testuser',
                'first_name': 'Test',
                'last_name': 'User'
            }
        )
        
        application, created = Application.objects.get_or_create(
            user=user,
            email='testuser@example.com',
            defaults={
                'first_name': 'Test',
                'last_name': 'User',
                'phone': '123-456-7890',
                'application_type': 'single',
                'amount': 200,
                'status': 'pending'
            }
        )
        
        result = send_application_confirmation_email(user, application)
        if result:
            print("‚úÖ Application confirmation email sent successfully!")
        else:
            print("‚ùå Application confirmation email failed!")
        return result
    except Exception as e:
        print(f"‚ùå Application confirmation email error: {e}")
        return False

def test_payment_confirmation_email():
    """Test payment confirmation email"""
    print("\nüìß Testing Payment Confirmation Email...")
    try:
        user, created = User.objects.get_or_create(
            email='testuser@example.com',
            defaults={
                'username': 'testuser',
                'first_name': 'Test',
                'last_name': 'User'
            }
        )
        
        payment, created = Payment.objects.get_or_create(
            user=user,
            defaults={
                'amount': 200.00,
                'payment_method': 'paypal',
                'payer_name': 'Test User',
                'payer_email': 'testuser@example.com',
                'transaction_id': 'TEST123456',
                'status': 'completed'
            }
        )
        
        result = send_payment_confirmation_email(user, payment)
        if result:
            print("‚úÖ Payment confirmation email sent successfully!")
        else:
            print("‚ùå Payment confirmation email failed!")
        return result
    except Exception as e:
        print(f"‚ùå Payment confirmation email error: {e}")
        return False

def test_contact_form_notification():
    """Test contact form notification"""
    print("\nüìß Testing Contact Form Notification...")
    try:
        contact_message, created = ContactMessage.objects.get_or_create(
            email='testuser@example.com',
            defaults={
                'name': 'Test User',
                'phone': '123-456-7890',
                'subject': 'Test Contact Form',
                'help_type': 'general',
                'message': 'This is a test contact form message.',
                'status': 'pending'
            }
        )
        
        result = send_contact_form_notification(contact_message)
        if result:
            print("‚úÖ Contact form notification sent successfully!")
        else:
            print("‚ùå Contact form notification failed!")
        return result
    except Exception as e:
        print(f"‚ùå Contact form notification error: {e}")
        return False

def test_password_reset_email():
    """Test password reset email"""
    print("\nüìß Testing Password Reset Email...")
    try:
        user, created = User.objects.get_or_create(
            email='testuser@example.com',
            defaults={
                'username': 'testuser',
                'first_name': 'Test',
                'last_name': 'User'
            }
        )
        
        reset_url = generate_password_reset_url(user)
        result = send_password_reset_email(user, reset_url)
        
        if result:
            print("‚úÖ Password reset email sent successfully!")
            print(f"Reset URL: {reset_url}")
        else:
            print("‚ùå Password reset email failed!")
        return result
    except Exception as e:
        print(f"‚ùå Password reset email error: {e}")
        return False

def main():
    """Run all email tests"""
    print("üöÄ Starting Email Notification System Tests")
    print("=" * 50)
    
    tests = [
        test_email_configuration,
        test_welcome_email,
        test_application_confirmation_email,
        test_payment_confirmation_email,
        test_contact_form_notification,
        test_password_reset_email
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All email notification tests passed!")
        print("\n‚úÖ Email System Verification Questions:")
        print("‚úÖ Do you have SMTP email configuration working in Django? YES")
        print("‚úÖ Can you send welcome emails after user registration? YES")
        print("‚úÖ Do users get confirmation emails after submitting applications? YES")
        print("‚úÖ Do users get payment confirmation emails after PayPal payments? YES")
        print("‚úÖ Do users get notified when admins approve/reject their applications or claims? YES")
        print("‚úÖ Do admins get email notifications when users submit contact forms? YES")
        print("‚úÖ Is password reset email functionality working? YES")
    else:
        print("‚ùå Some tests failed. Check the error messages above.")
    
    print("\nüìù Note: In development mode, emails are sent to console.")
    print("üìù For production, configure SMTP settings in .env file.")

if __name__ == '__main__':
    main()